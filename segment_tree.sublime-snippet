<snippet>
	<content><![CDATA[

struct segtree{

int size;
vector<int> sums;

void init(int n){
    size=1;
    while(size<n) size*=2;
    sums.assign(2*size,0LL);
}

void build(vector<int> &a, int node, int lx, int rx){
  if(rx-lx==1) {
    if(lx<(int)a.size()){
      sums[node]=a[lx];

    }
    return;
  }
  int m=(lx+rx)/2;
  build(a, 2*node+1,lx,m);
  build(a, 2*node+2,m, rx);
  sums[node]=sums[2*node+1]+sums[2*node+2];

}
void build(vector<int> &a){
  build(a, 0, 0, size);
}

void set(int i, int v, int node, int lx, int rx){
  if(rx-lx==1){
    sums[node]=v;
    return;

  }

  int m=(lx+rx)/2;
  if(i<m) set(i,v,2*node+1,lx,m);
  else
    set(i,v,2*node+2,m,rx);

  sums[node]=sums[2*node+1]+sums[2*node+2];
}

void set(int i,int v){
  set(i,v,0LL,0LL,size);
}

int sum(int l,int r, int node , int lx, int rx){
  if(r<=lx or l>=rx) return 0LL;
    
    if(lx>=l and rx<=r) return sums[node];

    int m=(lx+rx)/2;
    int s1=sum(l,r,2*node+1,lx,m);
    int s2=sum(l,r,2*node+2,m,rx);
    return s1+s2;

}
int sum(int l, int r){
  return sum(l,r,0LL, 0LL, size);
}


};

]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	 <tabTrigger>segment_tree</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
